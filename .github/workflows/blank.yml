name: ETL cicd

on:
  push:
    branches: [ "main" ]
      
jobs:
# Lint test Stages
  lint_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r  src/requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# Test Stage
  py_test:
    runs-on: ubuntu-latest
    needs: lint_test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt

    - name: Test with pytest
      run: |
        pip3 install git+https://github.com/awslabs/aws-glue-libs.git
        pytest src/test/test.py

# Security source code Scan Stage
  Snyk_scan:
    runs-on: ubuntu-latest
    needs: [lint_test, py_test]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: code test

# Security source code Scan Stage
  Sonar_scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Please create sonar server while we are configuring and comment this step
    needs: [lint_test,  py_test, Snyk_scan ]
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
      

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2.0.2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  
# Trigger Glue Job
  trigger_glue_job:
    runs-on: ubuntu-latest
    needs: [Sonar_scan]
    steps:
    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}


    - name: Upload ETL script to S3
      run: |
        # Upload your ETL script to a temporary S3 location
        aws s3 cp src/etl.py s3://glue-dac/etl-scripts/

    - name: Trigger Glue Job
      run: |
        aws glue start-job-run \
          --job-name customer-data \
          --arguments '{"--SCRIPT_LOCATION":"s3://glue-dac/etl-scripts/", "--S3_INPUT_PATH":"s3://glue-dac/source/customers/", "--S3_OUTPUT_PATH":"s3://glue-dac/target/customers/" , "----COLUMN_TO_DROP":"Email"}'

    - name: Wait for Glue Job to Complete
      run: |
        JOB_RUN_ID=$(aws glue start-job-run --job-name customer-data --query 'JobRunId' --output text)
        echo "JobRunId: $JOB_RUN_ID"
        aws glue get-job-run --job-name customer-data --run-id $JOB_RUN_ID --query 'JobRun.JobRunState'
